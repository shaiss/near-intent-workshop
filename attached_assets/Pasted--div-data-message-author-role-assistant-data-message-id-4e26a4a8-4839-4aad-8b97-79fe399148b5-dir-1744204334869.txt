<div data-message-author-role="assistant" data-message-id="4e26a4a8-4839-4aad-8b97-79fe399148b5" dir="auto" class="min-h-8 text-message relative flex w-full flex-col items-end gap-2 text-start break-words whitespace-normal [.text-message+&amp;]:mt-5" data-message-model-slug="gpt-4o"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose dark:prose-invert w-full break-words dark"><p data-start="0" data-end="131" class="">Excellent—now that your backend and frontend are wired up, it's time to <strong data-start="72" data-end="91">test and deploy</strong> everything in a controlled environment.</p>
<hr data-start="133" data-end="136" class="">
<h2 data-start="138" data-end="183" class=""><strong data-start="141" data-end="183">Part 5: Testnet Deployment &amp; Debugging</strong></h2>
<hr data-start="185" data-end="188" class="">
<h3 data-start="190" data-end="206" class=""><strong data-start="194" data-end="206">Overview</strong></h3>
<p data-start="207" data-end="352" class="">This section ensures your PoC works end-to-end on <strong data-start="257" data-end="273">NEAR Testnet</strong>, with all contracts deployed, intent flows simulated, and debug logs analyzed.</p>
<hr data-start="354" data-end="357" class="">
<h3 data-start="359" data-end="398" class=""><strong data-start="363" data-end="398">5.1 Deploy Contracts to Testnet</strong></h3>
<p data-start="400" data-end="484" class=""><strong data-start="400" data-end="408">Time</strong>: 10 minutes<br data-start="420" data-end="423">
<strong data-start="423" data-end="431">Goal</strong>: Deploy your <code data-start="445" data-end="455">Verifier</code> and <code data-start="460" data-end="468">Solver</code> smart contracts</p>
<h4 data-start="486" data-end="534" class=""><strong data-start="491" data-end="534">Create Subaccounts (Optional but Clean)</strong></h4>
<pre class="overflow-visible!" data-start="535" data-end="702"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-bash"><span><span>near create-account verifier.yourname.testnet --masterAccount yourname.testnet
near create-account solver.yourname.testnet --masterAccount yourname.testnet
</span></span></code></div></pre>
<h4 data-start="704" data-end="737" class=""><strong data-start="709" data-end="737">Deploy Verifier Contract</strong></h4>
<pre class="overflow-visible!" data-start="738" data-end="887"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-bash"><span><span>near deploy --accountId verifier.yourname.testnet \
  --wasmFile ./contracts/verifier/target/wasm32-unknown-unknown/release/verifier.wasm
</span></span></code></div></pre>
<h4 data-start="889" data-end="920" class=""><strong data-start="894" data-end="920">Deploy Solver Contract</strong></h4>
<pre class="overflow-visible!" data-start="921" data-end="1064"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-bash"><span><span>near deploy --accountId solver.yourname.testnet \
  --wasmFile ./contracts/solver/target/wasm32-unknown-unknown/release/solver.wasm
</span></span></code></div></pre>
<hr data-start="1066" data-end="1069" class="">
<h3 data-start="1071" data-end="1115" class=""><strong data-start="1075" data-end="1115">5.2 Test Function Calls via NEAR CLI</strong></h3>
<p data-start="1117" data-end="1184" class=""><strong data-start="1117" data-end="1125">Time</strong>: 10 minutes<br data-start="1137" data-end="1140">
<strong data-start="1140" data-end="1148">Goal</strong>: Manually test smart contract logic</p>
<h4 data-start="1186" data-end="1215" class=""><strong data-start="1191" data-end="1215">Test Verifier Intent</strong></h4>
<pre class="overflow-visible!" data-start="1216" data-end="1457"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-bash"><span><span>near call verifier.yourname.testnet verify_intent <span class="hljs-string">'{
  "intent": {
    "action": "swap",
    "input_token": "USDC",
    "input_amount": 100,
    "output_token": "wNEAR",
    "max_slippage": 0.5
  }
}'</span> --accountId yourname.testnet
</span></span></code></div></pre>
<h4 data-start="1459" data-end="1485" class=""><strong data-start="1464" data-end="1485">Test Solver Logic</strong></h4>
<pre class="overflow-visible!" data-start="1486" data-end="1631"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-bash"><span><span>near call solver.yourname.testnet solve_intent <span class="hljs-string">'{
  "user": "yourname.testnet",
  "input_amount": 100
}'</span> --accountId yourname.testnet
</span></span></code></div></pre>
<hr data-start="1633" data-end="1636" class="">
<h3 data-start="1638" data-end="1675" class=""><strong data-start="1642" data-end="1675">5.3 Debugging Intent Failures</strong></h3>
<p data-start="1677" data-end="1743" class=""><strong data-start="1677" data-end="1685">Time</strong>: 10 minutes<br data-start="1697" data-end="1700">
<strong data-start="1700" data-end="1708">Goal</strong>: Add console logs and troubleshoot</p>
<h4 data-start="1745" data-end="1769" class=""><strong data-start="1750" data-end="1769">Rust Debug Logs</strong></h4>
<p data-start="1770" data-end="1811" class="">Use <code data-start="1774" data-end="1788">env::log_str</code> inside your contracts:</p>
<pre class="overflow-visible!" data-start="1812" data-end="1865"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-rust"><span><span>env::</span><span><span class="hljs-title function_ invoke__">log_str</span></span><span>(</span><span><span class="hljs-string">"Solver execution started"</span></span><span>);
</span></span></code></div></pre>
<h4 data-start="1867" data-end="1904" class=""><strong data-start="1872" data-end="1904">View Logs After Transactions</strong></h4>
<p data-start="1905" data-end="2022" class="">Use NEAR Explorer to search for contract logs:
<a data-start="1952" data-end="2022" rel="noopener" target="_new" class="">https://explorer.testnet.near.org</a></p>
<p data-start="2024" data-end="2039" class="">Or in terminal:</p>
<pre class="overflow-visible!" data-start="2040" data-end="2110"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-bash"><span><span>near view-state verifier.yourname.testnet --finality final
</span></span></code></div></pre>
<h4 data-start="2112" data-end="2134" class=""><strong data-start="2117" data-end="2134">Common Issues</strong></h4>
<ul data-start="2135" data-end="2319">
<li data-start="2135" data-end="2188" class="">
<p data-start="2137" data-end="2188" class=""><strong data-start="2137" data-end="2152">Missing gas</strong>: Increase <code data-start="2163" data-end="2168">gas</code> to <code data-start="2172" data-end="2188">30000000000000</code></p>
</li>
<li data-start="2189" data-end="2250" class="">
<p data-start="2191" data-end="2250" class=""><strong data-start="2191" data-end="2207">Key mismatch</strong>: Verify signer ID and contract permissions</p>
</li>
<li data-start="2251" data-end="2319" class="">
<p data-start="2253" data-end="2319" class=""><strong data-start="2253" data-end="2276">Malformed arguments</strong>: Ensure JSON payloads are encoded properly</p>
</li>
</ul>
<hr data-start="2321" data-end="2324" class="">
<h3 data-start="2326" data-end="2375" class=""><strong data-start="2330" data-end="2375">5.4 Simulate Solvers in Real Time (Bonus)</strong></h3>
<p data-start="2377" data-end="2464" class=""><strong data-start="2377" data-end="2385">Goal</strong>: Add a cron-like script or Lambda that simulates a solver listening to intents</p>
<pre class="overflow-visible!" data-start="2466" data-end="2717"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-js"><span><span><span class="hljs-comment">// pseudo-script</span></span><span>
</span><span><span class="hljs-keyword">while</span></span><span> (</span><span><span class="hljs-literal">true</span></span><span>) {
  </span><span><span class="hljs-keyword">const</span></span><span> openIntents = </span><span><span class="hljs-keyword">await</span></span><span> </span><span><span class="hljs-title function_">fetch</span></span><span>(</span><span><span class="hljs-string">'your-indexer/intents'</span></span><span>);
  </span><span><span class="hljs-keyword">for</span></span><span> (</span><span><span class="hljs-keyword">const</span></span><span> intent </span><span><span class="hljs-keyword">of</span></span><span> openIntents) {
    </span><span><span class="hljs-keyword">if</span></span><span> (intent.</span><span><span class="hljs-property">token</span></span><span> === </span><span><span class="hljs-string">'USDC'</span></span><span>) {
      </span><span><span class="hljs-keyword">await</span></span><span> solver.</span><span><span class="hljs-title function_">solveIntent</span></span><span>(intent.</span><span><span class="hljs-property">user</span></span><span>, intent.</span><span><span class="hljs-property">input_amount</span></span><span>);
    }
  }
}
</span></span></code></div></pre>
<p data-start="2719" data-end="2837" class="">Use a mock database or JSON file for now. Later: integrate with The Graph or NEAR Lake Indexer for real-time indexing.</p>
<hr data-start="2839" data-end="2842" class="">
<h3 data-start="2844" data-end="2870" class=""><strong data-start="2848" data-end="2870">Checkpoint Summary</strong></h3>
<p data-start="2871" data-end="2882" class="">You’ve now:</p>
<ul data-start="2883" data-end="3053">
<li data-start="2883" data-end="2909" class="">
<p data-start="2885" data-end="2909" class="">Deployed to NEAR Testnet</p>
</li>
<li data-start="2910" data-end="2955" class="">
<p data-start="2912" data-end="2955" class="">Simulated transactions via CLI and frontend</p>
</li>
<li data-start="2956" data-end="2998" class="">
<p data-start="2958" data-end="2998" class="">Verified real intent → solver resolution</p>
</li>
<li data-start="2999" data-end="3053" class="">
<p data-start="3001" data-end="3053" class="">Learned to debug, log, and iterate on contract logic</p>
</li>
</ul>
<hr data-start="3055" data-end="3058" class="">
<p data-start="3060" data-end="3202" class=""><strong data-start="3060" data-end="3071">Next Up</strong>:<br data-start="3072" data-end="3075">
<strong data-start="3075" data-end="3108">Part 6: Going Beyond the Demo</strong> — learn how to extend your POC with real use cases like DeFi, NFTs, or cross-chain messaging.</p>
<p data-start="3204" data-end="3243" class="">Would you like to continue with Part 6?</p></div></div></div>