Perfect—now we’re getting hands-on.

---

## **Part 2: Building the Backend (Intent Verifier & Solver)**

---

### **Overview**
In this section, you'll build and deploy:
- A **Verifier contract**: Ensures that a Solver's proposed outcome matches the user's original intent.
- A **Solver contract**: Implements logic to fulfill an intent (e.g., perform a token swap).

This backend logic enables you to simulate and test NEAR Intents in a real environment.

---

### **2.1 Setting Up a Local Smart Contract**

**Time**: 10 minutes  
**Format**: Live coding

**Assume Rust-based NEAR contracts** (feel free to swap in AssemblyScript later)

```bash
cd contracts
cargo new --lib verifier --vcs none
cd verifier
```

Update `Cargo.toml`:
```toml
[package]
name = "verifier"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
```

Initialize contract code: `src/lib.rs`
```rust
use near_sdk::{env, near_bindgen, serde::{Deserialize, Serialize}};

#[near_bindgen]
#[derive(Default)]
pub struct Verifier {}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Intent {
    pub action: String,
    pub input_token: String,
    pub input_amount: u128,
    pub output_token: String,
    pub max_slippage: f64,
}

#[near_bindgen]
impl Verifier {
    pub fn verify_intent(&self, intent: Intent) -> bool {
        // placeholder logic
        env::log_str(&format!("Verifying intent: {:?}", intent.action));
        true
    }
}
```

Build the contract:
```bash
cargo build --target wasm32-unknown-unknown --release
```

---

### **2.2 Writing the Solver Contract**

**Time**: 10 minutes

Create a new folder:
```bash
cd ..
cargo new --lib solver --vcs none
cd solver
```

Basic example contract that “fulfills” an intent:
```rust
#[near_bindgen]
#[derive(Default)]
pub struct Solver {}

#[near_bindgen]
impl Solver {
    pub fn solve_intent(&self, user: String, input_amount: u128) -> bool {
        env::log_str(&format!("Executing solver logic for: {}", user));
        // In reality, this would interact with DEXs, bridges, etc.
        true
    }
}
```

Build it:
```bash
cargo build --target wasm32-unknown-unknown --release
```

---

### **2.3 Deploying to Testnet**

**Time**: 10 minutes  
**Pre-requisite**: Use an existing testnet account

Upload Verifier:
```bash
near deploy --accountId yourname.testnet --wasmFile ./verifier/target/wasm32-unknown-unknown/release/verifier.wasm
```

Upload Solver:
```bash
near deploy --accountId solver.yourname.testnet --wasmFile ./solver/target/wasm32-unknown-unknown/release/solver.wasm
```

Test call:
```bash
near call yourname.testnet verify_intent '{"intent":{"action":"swap","input_token":"USDC","input_amount":100,"output_token":"wNEAR","max_slippage":0.5}}' --accountId yourname.testnet
```

---

### **2.4 Connecting Verifier → Solver Logic**

**Advanced Option**:
Add a function in `Verifier` contract to *call* the Solver (cross-contract call):
```rust
#[ext_contract(ext_solver)]
trait ExtSolver {
    fn solve_intent(&self, user: String, input_amount: u128) -> bool;
}
```

Then invoke this in your logic after verifying.

---

### **2.5 Bonus: Fees & Incentives Model**

You can also add:
- A fee (fixed or % based) deducted before Solver execution
- A Solver reward mechanism
- A “challenge” flow if multiple Solvers compete

---

### **Checkpoint Summary**
By the end of this section, participants will have:
- Written and deployed two Rust smart contracts
- Simulated a full intent → verify → solve flow
- Understood how NEAR's contracts interoperate

---

**Next Up**:  
**Part 3: Creating the Smart Wallet Experience** — we’ll build a simple smart wallet interface using session keys and abstraction.

Want to continue with Part 3 now? Or pause to create unit tests or simulation scripts for these contracts?