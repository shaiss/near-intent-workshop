Awesome—time to build the wallet layer.

---

## **Part 3: Creating the Smart Wallet Experience**

---

### **Overview**
In this section, we’ll build a basic **smart wallet abstraction** to:
- Simplify user authentication
- Enable delegated transactions
- Simulate gasless execution or session-based workflows

This sets the foundation for a clean intent UX.

---

### **3.1 Integrating NEAR Wallet Selector**

**Time**: 10 minutes  
**Goal**: Enable wallet connection with NEAR testnet

**Install wallet selector packages**:
```bash
cd ../frontend
npm install @near-wallet-selector/core \
            @near-wallet-selector/near-wallet \
            near-api-js
```

**Add to your `index.ts` or auth module**:
```ts
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupNearWallet } from '@near-wallet-selector/near-wallet';

export const initWallet = async () => {
  const selector = await setupWalletSelector({
    network: 'testnet',
    modules: [setupNearWallet()],
  });

  return selector;
};
```

**Create a connect button**:
```tsx
const ConnectWallet = ({ selector }) => {
  const handleConnect = async () => {
    const wallet = await selector.wallet('near-wallet');
    await wallet.signIn({
      contractId: 'your-contract.testnet',
      methodNames: ['verify_intent'],
    });
  };

  return <button onClick={handleConnect}>Connect Wallet</button>;
};
```

---

### **3.2 Creating a Session-based Smart Wallet**

**Time**: 15 minutes  
**Concept**: Use session keys or delegated signing to abstract away repeated wallet confirmations.

**Option 1: Delegated Key**
- Create a `full-access` key tied to a local signer
- Use `keyStore` from `near-api-js` to sign on behalf of the user

```ts
import { connect, keyStores, KeyPair } from 'near-api-js';

const setupSessionWallet = async (privateKey: string) => {
  const keyStore = new keyStores.InMemoryKeyStore();
  const keyPair = KeyPair.fromString(privateKey);
  await keyStore.setKey("testnet", "your-account.testnet", keyPair);

  const near = await connect({
    networkId: "testnet",
    keyStore,
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
  });

  const account = await near.account("your-account.testnet");
  return account;
};
```

Use this wallet to call contracts directly without user confirmation.

---

### **3.3 Managing Keys & User Auth**

**Time**: 10 minutes  
**Key Actions**:
- Add session duration/expiration
- Encrypt and store session key in localStorage
- Rotate keys via UI button (e.g., “Reset Session”)

You can add a helper method to re-create or delete the session key if needed.

---

### **3.4 Abstracting User Actions into Intents**

**Goal**: Let the user describe the *goal*, not the *method*.

**Example UI Form**:
```tsx
<Form>
  <label>Swap Token</label>
  <input name="amount" />
  <select name="inputToken">...</select>
  <select name="outputToken">...</select>
  <button onClick={submitIntent}>Submit</button>
</Form>
```

**submitIntent Function**:
```ts
const submitIntent = async () => {
  const intent = {
    action: "swap",
    input_token: "USDC",
    input_amount: 100,
    output_token: "wNEAR",
    max_slippage: 0.5
  };

  const account = await setupSessionWallet(YOUR_SESSION_PRIVATE_KEY);
  const res = await account.functionCall({
    contractId: 'verifier.testnet',
    methodName: 'verify_intent',
    args: { intent },
    gas: '30000000000000',
    attachedDeposit: '0',
  });

  console.log(res);
};
```

---

### **Checkpoint Summary**

By now you’ve:
- Integrated NEAR wallet connection
- Built a lightweight session wallet system
- Abstracted a user action into an intent and sent it programmatically

---

**Next Up**:  
**Part 4: Building the Frontend**  
- This is where we’ll make it beautiful and intuitive for users to:
  - Submit intents
  - See solver options
  - Choose and execute one-click transactions

Would you like to continue to Part 4 or pause to create session key management utilities or advanced auth flows?