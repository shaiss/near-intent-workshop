---
description: Best practices for formatting markdown files in the workshop. Use this rule to ensure all content follows a consistent document structure, code block formatting, image and link usage, callouts, checklists, and terminal output examples. Promotes clarity, readability, and a professional appearance throughout the workshop materials.
globs: 
alwaysApply: false
---
# Markdown Content Formatting Guide

## Section Metadata and Structure
Every content section should include standard metadata for consistency. Use this format at the beginning of each main section file:

```markdown
# X.Y: Section Title

**Estimated Time:** XX minutes
**Prerequisites:** [Previous sections or skills required]
**Learning Objectives:**
- By the end of this section, you will be able to [specific, measurable outcome]
- [Add 2-4 clear learning objectives]

## Introduction

Brief introduction paragraph(s) explaining what this section covers.

## [Main Content Headings]

Content paragraphs with explanations, examples, and code snippets.

## Summary

Brief recap of what was covered.

## Next Steps

Preview of the next section with explicit link to the next module.
```

## Basic Document Structure
Every markdown file should follow this structure:
```markdown
# Main Title

Brief introduction paragraph(s) explaining what this section covers.

## Section Heading

Content paragraphs with explanations, examples, and code snippets.

### Sub-section (if needed)

More detailed content.

## Next Section

Additional content...

## Summary

Brief recap of what was covered.
```

## Code Block Formatting
Use triple backticks with the language for syntax highlighting:

````markdown
```javascript
function example() {
  console.log("This is a code example");
}
```
````

Always include the language identifier for proper syntax highlighting:
- ````javascript` for JavaScript code
- ````rust` for Rust code
- ````bash` or ````shell` for terminal commands
- ````json` for JSON data

## Command Line Formatting
Format command line examples consistently:
```markdown
```bash
$ npm install near-api-js
$ near login
```
```

Always use the `$` prefix for command prompts to distinguish commands from output.

## Placeholder Formatting
Use a consistent format for placeholders:
```markdown
<PLACEHOLDER_NAME>  # Correct format, with all-caps
```

Avoid inconsistent formats like:
```markdown
[placeholder]  # Avoid this format
YOUR_VARIABLE  # Avoid this without angle brackets
```

## Images and Diagrams
Place images in the `src/content/images/` folder and reference them:
```markdown
![Alt text description](mdc:../images/example-diagram.png)
```

## Links
- Internal links to other content:
```markdown
[Link to another section](mdc:../01-introduction/01-welcome.md)
```

- External links:
```markdown
[NEAR Protocol Documentation](mdc:https:/docs.near.org)
```

## Callouts and Notes
Use blockquotes for important information:
```markdown
> **Note:** This is important information that learners should pay attention to.

> **Warning:** This highlights a common mistake or issue to avoid.
```

## Core Concept Boxes
Use distinctive formatting for core concepts that will be referenced throughout the workshop:

```markdown
> **CORE CONCEPT: Verifier Contracts**
> 
> A verifier contract acts as the gatekeeper for intent execution. It validates that:
> - The intent format is correct
> - The intent is properly signed by the user
> - The requested action is permitted
> - Any constraints (time limits, etc.) are satisfied
> 
> Only after passing verification is an intent forwarded to a solver contract for execution.
```

## Task Instructions
Use checklists for step-by-step instructions:
```markdown
1. First, initialize the project:
   ```bash
   $ npm init -y
   ```
2. Install dependencies:
   ```bash
   $ npm install near-api-js
   ```
3. Create the main file structure...
```

## Terminal Output Examples
Show expected terminal output:
```markdown
After running the command, you should see output similar to:
```bash
Transaction ID: ABC123XYZ
Contract deployed to: example.testnet
Gas used: 2,345,678
```
```

## Content Preferences
- Use clear, concise language
- Provide practical examples
- Explain concepts before showing code
- Include troubleshooting tips where appropriate
- Link to official documentation when relevant
- Use second-person address consistently ("you will learn" not "we will cover")
- Maintain consistent terminology throughout all sections
