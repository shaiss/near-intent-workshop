Great—now let’s turn everything into a usable experience.

---

## **Part 4: Building the Frontend**

---

### **Overview**
In this part, you’ll build a **React-based frontend** that:
- Lets users define and submit intents
- Displays available solver responses
- Executes the selected solution via a smart wallet abstraction

We'll use **React + Vite**, but this works in any modern frontend stack (Next.js, SvelteKit, etc.).

---

### **4.1 Setting Up the Frontend Project**

**Time**: 5 minutes

If you don’t already have a frontend:
```bash
npm create vite@latest frontend --template react
cd frontend
npm install
```

Install essential packages:
```bash
npm install near-api-js @near-wallet-selector/core \
            @near-wallet-selector/near-wallet \
            tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

Set up Tailwind in `tailwind.config.js` and `index.css`.

---

### **4.2 Connect Wallet & Display Intent Form**

**Time**: 10 minutes

#### **Wallet Connect UI (WalletSelector)**

Create a `WalletProvider.tsx` to manage connection:
```tsx
import { createContext, useContext, useEffect, useState } from 'react';
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupNearWallet } from '@near-wallet-selector/near-wallet';

const WalletContext = createContext(null);

export const WalletProvider = ({ children }) => {
  const [wallet, setWallet] = useState(null);

  useEffect(() => {
    const init = async () => {
      const selector = await setupWalletSelector({
        network: 'testnet',
        modules: [setupNearWallet()],
      });

      const wallet = await selector.wallet('near-wallet');
      setWallet(wallet);
    };
    init();
  }, []);

  return <WalletContext.Provider value={wallet}>{children}</WalletContext.Provider>;
};

export const useWallet = () => useContext(WalletContext);
```

#### **Intent Submission UI**

```tsx
export const IntentForm = () => {
  const [input, setInput] = useState('USDC');
  const [output, setOutput] = useState('wNEAR');
  const [amount, setAmount] = useState(0);
  const wallet = useWallet();

  const handleSubmit = async () => {
    const intent = {
      action: 'swap',
      input_token: input,
      input_amount: parseInt(amount),
      output_token: output,
      max_slippage: 0.5,
    };

    await wallet.signAndSendTransaction({
      signerId: 'your-wallet.testnet',
      receiverId: 'verifier.testnet',
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: 'verify_intent',
            args: { intent },
            gas: '30000000000000',
            deposit: '0',
          },
        },
      ],
    });
  };

  return (
    <div>
      <input placeholder="Amount" onChange={(e) => setAmount(e.target.value)} />
      <select onChange={(e) => setInput(e.target.value)}>
        <option>USDC</option><option>DAI</option>
      </select>
      <select onChange={(e) => setOutput(e.target.value)}>
        <option>wNEAR</option><option>USDT</option>
      </select>
      <button onClick={handleSubmit}>Submit Intent</button>
    </div>
  );
};
```

---

### **4.3 Displaying Solver Options**

**Time**: 10 minutes

You’ll simulate solver options (future: auto-query multiple on-chain or off-chain solvers)

```tsx
const fakeSolvers = [
  { id: 'Solver 1', route: 'Ref Finance', price: '1:1.05' },
  { id: 'Solver 2', route: 'Jumbo DEX', price: '1:1.04' },
];

export const SolverPicker = ({ onPick }) => (
  <div>
    <h3>Pick a Solver</h3>
    {fakeSolvers.map(solver => (
      <div key={solver.id} className="border p-2 my-2">
        <p>{solver.id} - {solver.route} ({solver.price})</p>
        <button onClick={() => onPick(solver)}>Execute</button>
      </div>
    ))}
  </div>
);
```

---

### **4.4 Execute Intent Fulfillment**

**Time**: 10 minutes

Once user selects a solver, send the transaction through the smart wallet:
```tsx
const executeSolver = async (solverId, intent) => {
  const wallet = useWallet();
  const accountId = 'solver.testnet';

  await wallet.signAndSendTransaction({
    signerId: 'your-wallet.testnet',
    receiverId: accountId,
    actions: [{
      type: 'FunctionCall',
      params: {
        methodName: 'solve_intent',
        args: {
          user: wallet.accountId,
          input_amount: intent.input_amount
        },
        gas: '30000000000000',
        deposit: '0'
      }
    }]
  });
};
```

---

### **4.5 UI Polish (Optional but Recommended)**

- Add transaction status: pending, success, fail
- Use `useReducer` or `Zustand` for state management
- Add `Toast` notifications for UX feedback
- Animate loading state during intent resolution

---

### **Checkpoint Summary**
Participants now have:
- A working frontend where users can:
  - Connect a NEAR wallet
  - Submit a high-level intent
  - Pick a solver response
  - Execute the solution abstractly

---

**Next Up**:  
**Part 5: Testnet Deployment & Debugging** — where we’ll simulate test cases, evaluate edge conditions, and show how to QA intent flows.

Would you like to continue to Part 5 now?