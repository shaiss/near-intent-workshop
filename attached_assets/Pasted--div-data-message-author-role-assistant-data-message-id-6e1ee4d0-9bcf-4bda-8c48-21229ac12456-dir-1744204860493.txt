<div data-message-author-role="assistant" data-message-id="6e1ee4d0-9bcf-4bda-8c48-21229ac12456" dir="auto" class="min-h-8 text-message relative flex w-full flex-col items-end gap-2 text-start break-words whitespace-normal [.text-message+&amp;]:mt-5" data-message-model-slug="gpt-4o"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose dark:prose-invert w-full break-words dark"><p data-start="0" data-end="39" class="">Awesome—time to build the wallet layer.</p>
<hr data-start="41" data-end="44" class="">
<h2 data-start="46" data-end="97" class=""><strong data-start="49" data-end="97">Part 3: Creating the Smart Wallet Experience</strong></h2>
<hr data-start="99" data-end="102" class="">
<h3 data-start="104" data-end="120" class=""><strong data-start="108" data-end="120">Overview</strong></h3>
<p data-start="121" data-end="190" class="">In this section, we’ll build a basic <strong data-start="158" data-end="186">smart wallet abstraction</strong> to:</p>
<ul data-start="191" data-end="309">
<li data-start="191" data-end="221" class="">
<p data-start="193" data-end="221" class="">Simplify user authentication</p>
</li>
<li data-start="222" data-end="253" class="">
<p data-start="224" data-end="253" class="">Enable delegated transactions</p>
</li>
<li data-start="254" data-end="309" class="">
<p data-start="256" data-end="309" class="">Simulate gasless execution or session-based workflows</p>
</li>
</ul>
<p data-start="311" data-end="358" class="">This sets the foundation for a clean intent UX.</p>
<hr data-start="360" data-end="363" class="">
<h3 data-start="365" data-end="409" class=""><strong data-start="369" data-end="409">3.1 Integrating NEAR Wallet Selector</strong></h3>
<p data-start="411" data-end="486" class=""><strong data-start="411" data-end="419">Time</strong>: 10 minutes<br data-start="431" data-end="434">
<strong data-start="434" data-end="442">Goal</strong>: Enable wallet connection with NEAR testnet</p>
<p data-start="488" data-end="525" class=""><strong data-start="488" data-end="524">Install wallet selector packages</strong>:</p>
<pre class="overflow-visible!" data-start="526" data-end="665"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-bash"><span><span><span class="hljs-built_in">cd</span></span><span> ../frontend
npm install @near-wallet-selector/core \
            @near-wallet-selector/near-wallet \
            near-api-js
</span></span></code></div></pre>
<p data-start="667" data-end="709" class=""><strong data-start="667" data-end="708">Add to your <code data-start="681" data-end="691">index.ts</code> or auth module</strong>:</p>
<pre class="overflow-visible!" data-start="710" data-end="1029"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-ts"><span><span><span class="hljs-keyword">import</span></span><span> { setupWalletSelector } </span><span><span class="hljs-keyword">from</span></span><span> </span><span><span class="hljs-string">'@near-wallet-selector/core'</span></span><span>;
</span><span><span class="hljs-keyword">import</span></span><span> { setupNearWallet } </span><span><span class="hljs-keyword">from</span></span><span> </span><span><span class="hljs-string">'@near-wallet-selector/near-wallet'</span></span><span>;

</span><span><span class="hljs-keyword">export</span></span><span> </span><span><span class="hljs-keyword">const</span></span><span> </span><span><span class="hljs-title function_">initWallet</span></span><span> = </span><span><span class="hljs-keyword">async</span></span><span> (</span><span><span class="hljs-params"></span></span><span>) =&gt; {
  </span><span><span class="hljs-keyword">const</span></span><span> selector = </span><span><span class="hljs-keyword">await</span></span><span> </span><span><span class="hljs-title function_">setupWalletSelector</span></span><span>({
    </span><span><span class="hljs-attr">network</span></span><span>: </span><span><span class="hljs-string">'testnet'</span></span><span>,
    </span><span><span class="hljs-attr">modules</span></span><span>: [</span><span><span class="hljs-title function_">setupNearWallet</span></span><span>()],
  });

  </span><span><span class="hljs-keyword">return</span></span><span> selector;
};
</span></span></code></div></pre>
<p data-start="1031" data-end="1059" class=""><strong data-start="1031" data-end="1058">Create a connect button</strong>:</p>
<pre class="overflow-visible!" data-start="1060" data-end="1397"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-tsx"><span><span><span class="hljs-keyword">const</span></span><span> </span><span><span class="hljs-title function_">ConnectWallet</span></span><span> = (</span><span><span class="hljs-params">{ selector }</span></span><span>) =&gt; {
  </span><span><span class="hljs-keyword">const</span></span><span> </span><span><span class="hljs-title function_">handleConnect</span></span><span> = </span><span><span class="hljs-keyword">async</span></span><span> (</span><span><span class="hljs-params"></span></span><span>) =&gt; {
    </span><span><span class="hljs-keyword">const</span></span><span> wallet = </span><span><span class="hljs-keyword">await</span></span><span> selector.</span><span><span class="hljs-title function_">wallet</span></span><span>(</span><span><span class="hljs-string">'near-wallet'</span></span><span>);
    </span><span><span class="hljs-keyword">await</span></span><span> wallet.</span><span><span class="hljs-title function_">signIn</span></span><span>({
      </span><span><span class="hljs-attr">contractId</span></span><span>: </span><span><span class="hljs-string">'your-contract.testnet'</span></span><span>,
      </span><span><span class="hljs-attr">methodNames</span></span><span>: [</span><span><span class="hljs-string">'verify_intent'</span></span><span>],
    });
  };

  </span><span><span class="hljs-keyword">return</span></span><span> </span><span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span></span><span> </span><span><span class="hljs-attr">onClick</span></span><span>=</span><span><span class="hljs-string">{handleConnect}</span></span><span>&gt;Connect Wallet</span><span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span></span></span><span>&gt;;
};
</span></span></code></div></pre>
<hr data-start="1399" data-end="1402" class="">
<h3 data-start="1404" data-end="1453" class=""><strong data-start="1408" data-end="1453">3.2 Creating a Session-based Smart Wallet</strong></h3>
<p data-start="1455" data-end="1576" class=""><strong data-start="1455" data-end="1463">Time</strong>: 15 minutes<br data-start="1475" data-end="1478">
<strong data-start="1478" data-end="1489">Concept</strong>: Use session keys or delegated signing to abstract away repeated wallet confirmations.</p>
<p data-start="1578" data-end="1605" class=""><strong data-start="1578" data-end="1605">Option 1: Delegated Key</strong></p>
<ul data-start="1606" data-end="1723">
<li data-start="1606" data-end="1657" class="">
<p data-start="1608" data-end="1657" class="">Create a <code data-start="1617" data-end="1630">full-access</code> key tied to a local signer</p>
</li>
<li data-start="1658" data-end="1723" class="">
<p data-start="1660" data-end="1723" class="">Use <code data-start="1664" data-end="1674">keyStore</code> from <code data-start="1680" data-end="1693">near-api-js</code> to sign on behalf of the user</p>
</li>
</ul>
<pre class="overflow-visible!" data-start="1725" data-end="2282"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-ts"><span><span><span class="hljs-keyword">import</span></span><span> { connect, keyStores, </span><span><span class="hljs-title class_">KeyPair</span></span><span> } </span><span><span class="hljs-keyword">from</span></span><span> </span><span><span class="hljs-string">'near-api-js'</span></span><span>;

</span><span><span class="hljs-keyword">const</span></span><span> </span><span><span class="hljs-title function_">setupSessionWallet</span></span><span> = </span><span><span class="hljs-keyword">async</span></span><span> (</span><span><span class="hljs-params">privateKey: <span class="hljs-built_in">string</span></span></span><span>) =&gt; {
  </span><span><span class="hljs-keyword">const</span></span><span> keyStore = </span><span><span class="hljs-keyword">new</span></span><span> keyStores.</span><span><span class="hljs-title class_">InMemoryKeyStore</span></span><span>();
  </span><span><span class="hljs-keyword">const</span></span><span> keyPair = </span><span><span class="hljs-title class_">KeyPair</span></span><span>.</span><span><span class="hljs-title function_">fromString</span></span><span>(privateKey);
  </span><span><span class="hljs-keyword">await</span></span><span> keyStore.</span><span><span class="hljs-title function_">setKey</span></span><span>(</span><span><span class="hljs-string">"testnet"</span></span><span>, </span><span><span class="hljs-string">"your-account.testnet"</span></span><span>, keyPair);

  </span><span><span class="hljs-keyword">const</span></span><span> near = </span><span><span class="hljs-keyword">await</span></span><span> </span><span><span class="hljs-title function_">connect</span></span><span>({
    </span><span><span class="hljs-attr">networkId</span></span><span>: </span><span><span class="hljs-string">"testnet"</span></span><span>,
    keyStore,
    </span><span><span class="hljs-attr">nodeUrl</span></span><span>: </span><span><span class="hljs-string">"https://rpc.testnet.near.org"</span></span><span>,
    </span><span><span class="hljs-attr">walletUrl</span></span><span>: </span><span><span class="hljs-string">"https://wallet.testnet.near.org"</span></span><span>,
  });

  </span><span><span class="hljs-keyword">const</span></span><span> account = </span><span><span class="hljs-keyword">await</span></span><span> near.</span><span><span class="hljs-title function_">account</span></span><span>(</span><span><span class="hljs-string">"your-account.testnet"</span></span><span>);
  </span><span><span class="hljs-keyword">return</span></span><span> account;
};
</span></span></code></div></pre>
<p data-start="2284" data-end="2353" class="">Use this wallet to call contracts directly without user confirmation.</p>
<hr data-start="2355" data-end="2358" class="">
<h3 data-start="2360" data-end="2397" class=""><strong data-start="2364" data-end="2397">3.3 Managing Keys &amp; User Auth</strong></h3>
<p data-start="2399" data-end="2438" class=""><strong data-start="2399" data-end="2407">Time</strong>: 10 minutes<br data-start="2419" data-end="2422">
<strong data-start="2422" data-end="2437">Key Actions</strong>:</p>
<ul data-start="2439" data-end="2572">
<li data-start="2439" data-end="2472" class="">
<p data-start="2441" data-end="2472" class="">Add session duration/expiration</p>
</li>
<li data-start="2473" data-end="2520" class="">
<p data-start="2475" data-end="2520" class="">Encrypt and store session key in localStorage</p>
</li>
<li data-start="2521" data-end="2572" class="">
<p data-start="2523" data-end="2572" class="">Rotate keys via UI button (e.g., “Reset Session”)</p>
</li>
</ul>
<p data-start="2574" data-end="2651" class="">You can add a helper method to re-create or delete the session key if needed.</p>
<hr data-start="2653" data-end="2656" class="">
<h3 data-start="2658" data-end="2707" class=""><strong data-start="2662" data-end="2707">3.4 Abstracting User Actions into Intents</strong></h3>
<p data-start="2709" data-end="2770" class=""><strong data-start="2709" data-end="2717">Goal</strong>: Let the user describe the <em data-start="2745" data-end="2751">goal</em>, not the <em data-start="2761" data-end="2769">method</em>.</p>
<p data-start="2772" data-end="2792" class=""><strong data-start="2772" data-end="2791">Example UI Form</strong>:</p>
<pre class="overflow-visible!" data-start="2793" data-end="3004"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-tsx"><span><span>&lt;</span><span><span class="hljs-title class_">Form</span></span><span>&gt;
  </span><span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span></span></span></span><span>&gt;Swap Token</span><span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span></span></span><span>&gt;
  </span><span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span></span><span> </span><span><span class="hljs-attr">name</span></span><span>=</span><span><span class="hljs-string">"amount"</span></span><span> /&gt;
  </span><span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span></span><span> </span><span><span class="hljs-attr">name</span></span><span>=</span><span><span class="hljs-string">"inputToken"</span></span><span>&gt;...</span><span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span></span></span><span>&gt;
  </span><span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span></span></span></span><span> </span><span><span class="hljs-attr">name</span></span><span>=</span><span><span class="hljs-string">"outputToken"</span></span><span>&gt;...</span><span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span></span></span><span>&gt;
  </span><span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span></span></span></span><span> </span><span><span class="hljs-attr">onClick</span></span><span>=</span><span><span class="hljs-string">{submitIntent}</span></span><span>&gt;Submit</span><span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span></span></span><span>&gt;
&lt;/</span><span><span class="hljs-title class_">Form</span></span><span>&gt;
</span></span></code></div></pre>
<p data-start="3006" data-end="3032" class=""><strong data-start="3006" data-end="3031">submitIntent Function</strong>:</p>
<pre class="overflow-visible!" data-start="3033" data-end="3506"><div class="overflow-y-auto p-4" dir="ltr"><code class="whitespace-pre! language-ts"><span><span><span class="hljs-keyword">const</span></span><span> </span><span><span class="hljs-title function_">submitIntent</span></span><span> = </span><span><span class="hljs-keyword">async</span></span><span> (</span><span><span class="hljs-params"></span></span><span>) =&gt; {
  </span><span><span class="hljs-keyword">const</span></span><span> intent = {
    </span><span><span class="hljs-attr">action</span></span><span>: </span><span><span class="hljs-string">"swap"</span></span><span>,
    </span><span><span class="hljs-attr">input_token</span></span><span>: </span><span><span class="hljs-string">"USDC"</span></span><span>,
    </span><span><span class="hljs-attr">input_amount</span></span><span>: </span><span><span class="hljs-number">100</span></span><span>,
    </span><span><span class="hljs-attr">output_token</span></span><span>: </span><span><span class="hljs-string">"wNEAR"</span></span><span>,
    </span><span><span class="hljs-attr">max_slippage</span></span><span>: </span><span><span class="hljs-number">0.5</span></span><span>
  };

  </span><span><span class="hljs-keyword">const</span></span><span> account = </span><span><span class="hljs-keyword">await</span></span><span> </span><span><span class="hljs-title function_">setupSessionWallet</span></span><span>(</span><span><span class="hljs-variable constant_">YOUR_SESSION_PRIVATE_KEY</span></span><span>);
  </span><span><span class="hljs-keyword">const</span></span><span> res = </span><span><span class="hljs-keyword">await</span></span><span> account.</span><span><span class="hljs-title function_">functionCall</span></span><span>({
    </span><span><span class="hljs-attr">contractId</span></span><span>: </span><span><span class="hljs-string">'verifier.testnet'</span></span><span>,
    </span><span><span class="hljs-attr">methodName</span></span><span>: </span><span><span class="hljs-string">'verify_intent'</span></span><span>,
    </span><span><span class="hljs-attr">args</span></span><span>: { intent },
    </span><span><span class="hljs-attr">gas</span></span><span>: </span><span><span class="hljs-string">'30000000000000'</span></span><span>,
    </span><span><span class="hljs-attr">attachedDeposit</span></span><span>: </span><span><span class="hljs-string">'0'</span></span><span>,
  });

  </span><span><span class="hljs-variable language_">console</span></span><span>.</span><span><span class="hljs-title function_">log</span></span><span>(res);
};
</span></span></code></div></pre>
<hr data-start="3508" data-end="3511" class="">
<h3 data-start="3513" data-end="3539" class=""><strong data-start="3517" data-end="3539">Checkpoint Summary</strong></h3>
<p data-start="3541" data-end="3555" class="">By now you’ve:</p>
<ul data-start="3556" data-end="3706">
<li data-start="3556" data-end="3591" class="">
<p data-start="3558" data-end="3591" class="">Integrated NEAR wallet connection</p>
</li>
<li data-start="3592" data-end="3635" class="">
<p data-start="3594" data-end="3635" class="">Built a lightweight session wallet system</p>
</li>
<li data-start="3636" data-end="3706" class="">
<p data-start="3638" data-end="3706" class="">Abstracted a user action into an intent and sent it programmatically</p>
</li>
</ul>
<hr data-start="3708" data-end="3711" class="">
<p data-start="3713" data-end="3763" class=""><strong data-start="3713" data-end="3724">Next Up</strong>:<br data-start="3725" data-end="3728">
<strong data-start="3728" data-end="3761">Part 4: Building the Frontend</strong></p>
<ul data-start="3764" data-end="3919">
<li data-start="3764" data-end="3919" class="">
<p data-start="3766" data-end="3831" class="">This is where we’ll make it beautiful and intuitive for users to:</p>
<ul data-start="3834" data-end="3919">
<li data-start="3834" data-end="3850" class="">
<p data-start="3836" data-end="3850" class="">Submit intents</p>
</li>
<li data-start="3853" data-end="3873" class="">
<p data-start="3855" data-end="3873" class="">See solver options</p>
</li>
<li data-start="3876" data-end="3919" class="">
<p data-start="3878" data-end="3919" class="">Choose and execute one-click transactions</p>
</li>
</ul>
</li>
</ul>
<p data-start="3921" data-end="4033" class="">Would you like to continue to Part 4 or pause to create session key management utilities or advanced auth flows?</p></div></div></div>