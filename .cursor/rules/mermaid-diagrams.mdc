---
description: 
globs: 
alwaysApply: false
---
# Mermaid Diagram Guidelines

## Overview
Mermaid diagrams provide a way to create diagrams and visualizations using text in a markdown-like syntax. They are excellent for explaining workflows, sequences, and relationships in NEAR's intent-centric architecture.

## Diagram Types for Workshop Content

### Flow Charts
Use for visualizing processes like intent verification or smart wallet operations:

````markdown
```mermaid
flowchart TD
    A[User] -->|Creates Intent| B(Intent Object)
    B --> C{Intent Verifier}
    C -->|Valid| D[Solver Contract]
    C -->|Invalid| E[Reject]
    D --> F[Execute Transaction]
```
````

### Sequence Diagrams
Ideal for showing interactions between components:

````markdown
```mermaid
sequenceDiagram
    participant User
    participant Wallet
    participant Verifier
    participant Solver
    
    User->>Wallet: Sign Intent
    Wallet->>Verifier: Submit Intent
    Verifier->>Solver: Forward Valid Intent
    Solver->>User: Return Result
```
````

### Class Diagrams
Useful for explaining contract structures:

````markdown
```mermaid
classDiagram
    class IntentVerifier {
        +verify(intent)
        +isValidFormat(intent)
        +getIntentHash(intent)
    }
    class Solver {
        +solve(intent)
        +calculateResult()
        +executeTransaction()
    }
    IntentVerifier --> Solver
```
````

### State Diagrams
Good for illustrating state transitions:

````markdown
```mermaid
stateDiagram-v2
    [*] --> Created
    Created --> Verified
    Verified --> Executed
    Verified --> Failed
    Executed --> [*]
    Failed --> [*]
```
````

## Best Practices

### Diagram Size
- Keep diagrams simple and focused
- Limit to 10-15 elements for readability
- Use multiple simpler diagrams instead of one complex diagram

### Labeling
- Use clear, concise labels
- Maintain consistent terminology with the text
- Add descriptive captions beneath diagrams

### Colors and Styling
- Use colors consistently across diagrams
- Highlight important elements
- Maintain readability with proper contrast

### Context
- Always introduce diagrams in the text
- Explain key elements after the diagram
- Refer back to diagrams when explaining related concepts

## NEAR-Specific Diagram Examples

### Intent Flow
````markdown
```mermaid
flowchart LR
    A[User] -->|1. Creates| B(Intent)
    B -->|2. Submits| C{Intent Verifier}
    C -->|3a. Validates| D[Solver]
    C -->|3b. Rejects| E[Error]
    D -->|4. Executes| F[NEAR Blockchain]
```
````

### Smart Wallet Architecture
````markdown
```mermaid
flowchart TD
    A[Smart Wallet] -->|Controls| B(User Account)
    A -->|Manages| C(Session Keys)
    A -->|Signs| D(Intents)
    A -->|Abstracts| E(Cross-chain Actions)
    subgraph "Security Layer"
    C
    end
    subgraph "Interaction Layer"
    D
    E
    end
```
````

### Cross-Contract Call Sequence
````markdown
```mermaid
sequenceDiagram
    participant U as User
    participant V as Verifier Contract
    participant S as Solver Contract
    participant N as NEAR Runtime
    
    U->>V: Submit intent
    V->>V: Verify format & signature
    V->>S: Cross-contract call
    S->>N: Execute actions
    N->>S: Confirm execution
    S->>V: Return result
    V->>U: Notify completion
```
````
